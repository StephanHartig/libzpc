<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE reference PUBLIC "-//IBM//DTD DITA IBM Reference//EN"
 "ibm-concept.dtd">
<?Pub Sty _display FontColor="red"?>
<reference id="lxpc_apis_cbc" xml:lang="en-us">
<title>AES CBC APIs - zpc/aes_cbc.h</title>
<titlealts>
<navtitle> AES CBC APIs</navtitle>
<searchtitle><ph conref="lxcommon.dita#phrases/lib_title"/>: <keyword
conref="lxpc_conref.dita#lxpc_conref/libzpc"/> AES CBC APIs</searchtitle>
</titlealts>
<shortdesc>In file <filepath>zpc/aes_cbc.h</filepath>, <keyword
conref="lxpc_conref.dita#lxpc_conref/libzpc"/> provides APIs for processing AES keys in Cipher Block
Chaining (CBC) mode.</shortdesc>
<prolog>
<metadata>
<keywords>
<indexterm>AES CBC APIs</indexterm>
<indexterm>aes_cbc.h</indexterm>
<indexterm>CBC APIs</indexterm>
<indexterm>APIs <indexterm>CBC</indexterm></indexterm>
</keywords>
</metadata>
</prolog>
<refbody>
<section><p>The context of an AES-CBC operation is stored in objects of type <codeph>struct
zpc_aes_cbc</codeph>. Context objects must not be shared among multiple threads. They may be used
for multiple operations by setting or resetting the key or initialization vector.</p><!--<p><b>??????</b><keyword conref="lxpc_conref.dita#lxpc_conref/contob_upper"/>s are thread-safe. They are associated with an <keyword conref="lxpc_conref.dita#lxpc_conref/aeskeyobj"/> by the cryptographic operation’s <apiname>set_key</apiname> function which also increments the <keyword conref="lxpc_conref.dita#lxpc_conref/aeskeyobj"/>’s reference-count.<b>??????</b> </p>--><!--<p><b>??????</b>If a new key is associated with the <keyword conref="lxpc_conref.dita#lxpc_conref/contob"/> or the <keyword conref="lxpc_conref.dita#lxpc_conref/contob"/> is freed, the current associated <keyword conref="lxpc_conref.dita#lxpc_conref/aeskeyobj"/>’s reference-count is decremented. If a cryptographic operation internally detects an MKVP mismatch it re-derives the protected key from the <keyword conref="lxpc_conref.dita#lxpc_conref/aeskeyobj"/>’s secure key automatically. <b>??????</b></p>--><!--<p><b>??????</b>If a cryptographic operation internally detects an error other than a MKVP mismatch, and it has a copy of the old secure key, it retries its operation using the old secure key.<b>??????</b></p>--></section>
<section>
<title>zpc_aes_cbc_alloc</title>
<p><b>Purpose:</b></p>
<p>Allocate a new context object for an AES-CBC operation.</p>
<p><b>Format:</b>
<codeblock>
int zpc_aes_cbc_alloc ( 
    struct zpc_aes_cbc ** ctx )</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-CBC context object</entry>
</row>
</tbody>
</tgroup>
</table>
<p><b>Return codes:</b></p>
<p> 0 on success. Otherwise, a non-zero error code is returned.</p>
</section>
<section>
<title>zpc_aes_cbc_decrypt</title>
<p><b>Purpose:</b></p>
<p>Decrypt a ciphertext using AES-CBC to obtain the corresponding plaintext.</p>
<p> The ciphertext buffer length must be a multiple of 16 bytes. </p>
<p>The plaintext buffer must be large enough to store the resulting plaintext which has the same
length as the ciphertext. Removing any padding from the plaintext must be accomplished within the
application. </p>
<p> Plaintext and ciphertext buffers may be equal such that the operation is done in-place. If the
operation is not done in-place, plaintext and ciphertext buffers must not overlap. </p>
<p>A ciphertext may be decrypted chunk-wise. For every operation on a ciphertext chunk, the same
rules apply as for the one-shot decryption. In particular, the chunk length must be a multiple of 16
bytes. The same context object must be used to decrypt all chunks without modifying it between operations.</p>
<p><b>Format:</b>
<codeblock>
int zpc_aes_cbc_decrypt (
    struct zpc_aes_cbc * ctx,
    unsigned char * pt,
    const unsigned char * ct,
    size_t ctlen )</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-CBC context object</entry>
</row>
<row>
<entry>output</entry>
<entry>pt</entry>
<entry>plaintext</entry>
</row>
<row>
<entry>input</entry>
<entry>ct</entry>
<entry>ciphertext</entry>
</row>
<row>
<entry>input</entry>
<entry>ctlen</entry>
<entry>ciphertext length [bytes]</entry>
</row>
</tbody>
</tgroup>
</table>
<p><b>Return codes:</b></p>
<p> 0 on success. Otherwise, a non-zero error code is returned.</p>
</section>
<section>
<title>zpc_aes_cbc_encrypt</title>
<p><b>Purpose:</b></p>
<p>Encrypt a plaintext using AES-CBC to obtain the corresponding ciphertext.</p>
<p>The plaintext buffer length must be a multiple of 16 bytes. Padding the plaintext 
appropriately must be accomplished within the application.
</p>
<p>The ciphertext buffer must be large enough to store the resulting ciphertext which has the same 
length as the (padded) plaintext.</p>
<p>Plaintext and ciphertext buffers may be equal such that the operation is done in-place. If the
operation is not done in-place, plaintext and ciphertext buffers must not overlap. </p>
<p>A plaintext may be encrypted chunk-wise. For every operation on a plaintext chunk, the same rules
apply as for the one-shot encryption. In particular, all chunk-lengths must be a multiple of 16
bytes. The same context object must be used to encrypt all chunks without modifying it between
operations.</p>
<p><b>Format:</b>
<codeblock>
int zpc_aes_cbc_encrypt (
    struct zpc_aes_cbc * ctx,
    unsigned char * ct,
    const unsigned char * pt,
    size_t ptlen )</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-CBC context object</entry>
</row>
<row>
<entry>output</entry>
<entry>ct</entry>
<entry>ciphertext</entry>
</row>
<row>
<entry>input</entry>
<entry>pt</entry>
<entry>plaintext</entry>
</row>
<row>
<entry>input</entry>
<entry>ptlen</entry>
<entry>plaintext length [bytes]</entry>
</row>
</tbody>
</tgroup>
</table>
<p><b>Return codes:</b></p>
<p> 0 on success. Otherwise, a non-zero error code is returned.</p>
</section>
<section>
<title>zpc_aes_cbc_free</title>
<p><b>Purpose:</b></p>
<p>Free an AES-CBC context object.</p>
<p>If a key is set, the reference count of that key object is decremented. The context object
argument is set to NULL.</p>
<p><b>Format:</b>
<codeblock>
void zpc_aes_cbc_free (
     struct zpc_aes_cbc ** ctx )</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-CBC context object</entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section>
<title>zpc_aes_cbc_set_iv</title>
<p><b>Purpose:</b></p>
<p>Set the initialization vector to be used in the context of an AES-CBC operation.</p>
<p><b>Format:</b>
<codeblock>
int zpc_aes_cbc_set_iv (
    struct zpc_aes_cbc * ctx,
    const unsigned char * iv )</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-CBC context object</entry>
</row>
<row>
<entry>input</entry>
<entry>iv</entry>
<entry>16 byte initialization vector</entry>
</row>
</tbody>
</tgroup>
</table>
<p><b>Return codes:</b></p>
<p> 0 on success. Otherwise, a non-zero error code is returned.</p>
</section>
<section>
<title>zpc_aes_cbc_set_key</title>
<p><b>Purpose:</b></p>
<p>Set the key to be used in the context of an AES-CBC operation.</p>
<p><b>Format:</b>
<codeblock>
int zpc_aes_cbc_set_key (
    struct zpc_aes_cbc * ctx,
    struct zpc_aes_key * key )</codeblock>
</p>
<p>If a key is already set, the reference count of that key object is decremented. The context's key
reference is set to the key object argument. If the key object argument is not NULL, the reference
count of that key object is incremented.</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-CBC context object</entry>
</row>
<row>
<entry>input</entry>
<entry>key</entry>
<entry>AES key</entry>
</row>
</tbody>
</tgroup>
</table>
<p><b>Return codes:</b></p>
<p> 0 on success. Otherwise, a non-zero error code is returned.</p>
</section>
</refbody>
</reference>
<?Pub *0000003393?>
