<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE reference PUBLIC "-//IBM//DTD DITA IBM Reference//EN"
 "ibm-concept.dtd">
<?Pub Sty _display FontColor="red"?>
<reference id="lxpc_apis_ccm" xml:lang="en-us">
<title>AES CCM APIs - zpc/aes_ccm.h</title>
<titlealts>
<navtitle>AES CCM APIs</navtitle>
<searchtitle><ph conref="lxcommon.dita#phrases/lib_title"/>: <keyword
conref="lxpc_conref.dita#lxpc_conref/libzpc"/> AES CCM APIs</searchtitle>
</titlealts>
<shortdesc>In file <filepath>zpc/aes_ccm.h</filepath>, <keyword
conref="lxpc_conref.dita#lxpc_conref/libzpc"/> provides authenticated encryption APIs for processing
AES keys in CCM mode (counter with cipher block chaining message authentication code, or,
abbreviated, counter with CBC-MAC).</shortdesc>
<prolog>
<metadata>
<keywords>
<indexterm>AES CCM APIs</indexterm>
<indexterm>aes_ccm.h</indexterm>
<indexterm>CCM APIs</indexterm>
<indexterm>APIs <indexterm>CCM</indexterm></indexterm>
</keywords>
</metadata>
</prolog>
<refbody>
<section>
<p>The context of an AES-CCM operation is stored in objects of type <codeph>struct zpc_aes_ccm</codeph>. 
Context objects must not be
shared among multiple threads. They may be used for multiple operations by setting 
or resetting the key or initialization vector.</p>
</section>
<section>
<title>zpc_aes_ccm_alloc</title>
<p><b>Purpose:</b></p>
<p>Allocate a new context object for an AES-CCM operation.</p>
<p><b>Format:</b>
<codeblock>
int zpc_aes_ccm_alloc ( 
    struct zpc_aes_ccm ** ctx )</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-CCM context object</entry>
</row>
</tbody>
</tgroup>
</table>
<p><b>Return codes:</b></p>
<p> 0 on success. Otherwise, a non-zero error code is returned.</p>
</section>
<section>
<title>zpc_aes_ccm_decrypt</title>
<p><b>Purpose:</b></p>
<p>Decrypt a ciphertext verify the message authentication code of the corresponding plaintext and additional data using
AES-CCM.</p>
<p>The plaintext buffer must be large enough to store the resulting plaintext which has 
the same length as the ciphertext.</p>
<p>Plaintext and ciphertext buffer may be equal such that the operation is done in-place. If the operation is not done
in-place, plaintext and ciphertext buffers must not overlap.</p>
<p><b>Format:</b>
<codeblock>
int zpc_aes_ccm_decrypt (
    struct zpc_aes_ccm * ctx,
    unsigned char * pt,
    const unsigned char * mac,
    size_t maclen,
    const unsigned char * aad,
    size_t aadlen,
    const unsigned char * ct,
    size_t ctlen )</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-CCM context object</entry>
</row>
<row>
<entry>output</entry>
<entry>pt</entry>
<entry>plaintext</entry>
</row>
<row>
<entry>input</entry>
<entry>mac</entry>
<entry>message authentication code</entry>
</row>
<row>
<entry>input</entry>
<entry>maclen</entry>
<entry>message authentication code length [bytes]</entry>
</row>
<row>
<entry>input</entry>
<entry>aad</entry>
<entry>additional authenticated data</entry>
</row>
<row>
<entry>input</entry>
<entry>aadlen</entry>
<entry>additional authenticated data length [bytes]</entry>
</row>
<row>
<entry>input</entry>
<entry>ct</entry>
<entry>ciphertext</entry>
</row>
<row>
<entry>input</entry>
<entry>ctlen</entry>
<entry>ciphertext length [bytes]</entry>
</row>
</tbody>
</tgroup>
</table>
<p><b>Return codes:</b></p>
<p> 0 on success. Otherwise, a non-zero error code is returned.</p>
</section>
<section>
<title>zpc_aes_ccm_encrypt</title>
<p><b>Purpose:</b></p>
<p>Encrypt a plaintext and sign the plaintext and additional data using AES-CCM to obtain the corresponding ciphertext
and message authentication code.</p>
<p>The ciphertext buffer must be large enough to store the resulting ciphertext which has the same length as the
plaintext.</p>
<p>Plaintext and ciphertext buffer may be equal such that the operation is done in-place. If the operation is not done
in-place, plaintext and ciphertext buffers must not overlap.</p>
<p><b>Format:</b>
<codeblock>
int zpc_aes_ccm_encrypt (
    struct zpc_aes_ccm * ctx,
    unsigned char * ct,
    unsigned char * mac,
    size_t maclen,
    const unsigned char * aad,
    size_t aadlen,
    const unsigned char * pt,
    size_t ptlen )
    </codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-CCM context object</entry>
</row>
<row>
<entry>output</entry>
<entry>ct</entry>
<entry>ciphertext</entry>
</row>
<row>
<entry>output</entry>
<entry>mac</entry>
<entry>message authentication code</entry>
</row>
<row>
<entry>input</entry>
<entry>maclen</entry>
<entry>message authentication code length [bytes]</entry>
</row>
<row>
<entry>input</entry>
<entry>aad</entry>
<entry>additional authenticated data</entry>
</row>
<row>
<entry>input</entry>
<entry>aadlen</entry>
<entry>additional authenticated data length [bytes]</entry>
</row>
<row>
<entry>input</entry>
<entry>pt</entry>
<entry>plaintext</entry>
</row>
<row>
<entry>input</entry>
<entry>ptlen</entry>
<entry>plaintext length [bytes]</entry>
</row>
</tbody>
</tgroup>
</table>
<p><b>Return codes:</b></p>
<p> 0 on success. Otherwise, a non-zero error code is returned.</p>
</section>
<section>
<title>zpc_aes_ccm_free</title>
<p><b>Purpose:</b></p>
<p>Free an AES-CCM context object.</p>
<p>If a key is set, the reference count of that key object is decremented. 
The context object argument is set to NULL.</p>
<p><b>Format:</b>
<codeblock>
void zpc_aes_ccm_free (
     struct zpc_aes_ccm ** ctx )</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-CCM context object</entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section>
<title>zpc_aes_ccm_set_iv</title>
<p><b>Purpose:</b></p>
<p>Set the initialization vector to be used in the context of an AES-CCM operation.</p>
<p><b>Format:</b>
<codeblock>
int zpc_aes_ccm_set_iv (
    struct zpc_aes_ccm * ctx,
    const unsigned char * iv,
    size_t ivlen )</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-CCM context object</entry>
</row>
<row>
<entry>input</entry>
<entry>iv</entry>
<entry>7 - 13 byte initialization vector</entry>
</row>
<row>
<entry>input</entry>
<entry>ivlen</entry>
<entry>initialization vector length [bytes]</entry>
</row>
</tbody>
</tgroup>
</table>
<p><b>Return codes:</b></p>
<p> 0 on success. Otherwise, a non-zero error code is returned.</p>
</section>
<section>
<title>zpc_aes_ccm_set_key</title>
<p><b>Purpose:</b></p>
<p>Set the key to be used in the context of an AES-CCM operation.</p>
<p>If a key is already set, the reference count of that key object is decremented. 
The context's key reference is set to the key object argument. If the key object argument is not NULL, 
the reference count of that key object is incremented.</p>
<p><b>Format:</b>
<codeblock>
int zpc_aes_ccm_set_key (
    struct zpc_aes_ccm * ctx,
    struct zpc_aes_key * key )</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-CCM context object</entry>
</row>
<row>
<entry>input</entry>
<entry>key</entry>
<entry>AES key object</entry>
</row>
</tbody>
</tgroup>
</table>
<p><b>Return codes:</b></p>
<p> 0 on success. Otherwise, a non-zero error code is returned.</p>
</section>
</refbody>
</reference>
<?Pub *0000003393?>
