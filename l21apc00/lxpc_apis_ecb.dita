<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE reference PUBLIC "-//IBM//DTD DITA IBM Reference//EN"
 "ibm-concept.dtd">
<?Pub Sty _display FontColor="red"?>
<reference id="lxpc_apis_ecb" xml:lang="en-us">
<title>AES ECB APIs - zpc/aes_ecb.h</title>
<titlealts>
<navtitle>AES ECB APIs</navtitle>
<searchtitle><ph conref="lxcommon.dita#phrases/lib_title"/>: <keyword
conref="lxpc_conref.dita#lxpc_conref/libzpc"/> AES ECB APIs</searchtitle>
</titlealts>
<shortdesc><keyword conref="lxpc_conref.dita#lxpc_conref/libzpc"/> provides APIs for processing 
Advanced Encryption Standard (AES) block cipher in Electronic Code Book (ECB) mode of operation.
</shortdesc>
<prolog>
<metadata>
<keywords>
<indexterm>AES ECB APIs</indexterm>
<indexterm>aes_ecb.h</indexterm>
<indexterm>ECB APIs</indexterm>
<indexterm>APIs <indexterm>ECB</indexterm></indexterm>
</keywords>
</metadata>
</prolog>
<refbody>
<section>
<p>The context of a AES-ECB operation is stored in objects of type <codeph>struct zpc_aes_ecb</codeph>. 
Context objects must not be shared among multiple threads. They may be used for multiple operations by 
setting or resetting the key.</p>
</section>
<section>
<title>zpc_aes_ecb_alloc</title>
<p><b>Purpose:</b></p>
<p>Allocate a new context object for an AES-ECB operation.</p>
<p><b>Format:</b>
<codeblock>
int zpc_aes_ecb_alloc ( 
    struct zpc_aes_ecb ** ctx )</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>output</entry>
<entry>ctx</entry>
<entry>AES-ECB context object</entry>
</row>
</tbody>
</tgroup>
</table>
<p><b>Return codes:</b></p>
<p> 0 on success. Otherwise, a non-zero error code is returned.</p>
</section>
<section>
<title>zpc_aes_ecb_decrypt</title>
<p><b>Purpose:</b></p>
<p>Decrypt a ciphertext using AES-ECB to obtain the corresponding plaintext.</p>
<p>The ciphertext buffer length must be a multiple of 16 bytes.</p>
<p>The plaintext buffer must be large enough to store the resulting plaintext 
which has the same length as the ciphertext. The application must remove 
any padding from the plaintext.</p>
<p>Plaintext and ciphertext buffer may be equal such that the operation is 
done in-place. If the operation is not done in-place, plaintext and 
ciphertext buffers must not overlap.</p>
<p>A ciphertext may be decrypted chunk-wise. For every operation on a ciphertext 
chunk, the same rules apply as for the one-shot decryption. 
In particular, each chunk's length must be a multiple of 16 bytes. 
The same context object must be used to decrypt all chunks without modifying it 
between operations.</p>
<p><b>Format:</b>
<codeblock>
int zpc_aes_ecb_decrypt (
    struct zpc_aes_ecb * ctx,
    unsigned char * pt,
    const unsigned char * ct,
    size_t ctlen )</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-ECB context object</entry>
</row>
<row>
<entry>output</entry>
<entry>pt</entry>
<entry>plaintext buffer</entry>
</row>
<row>
<entry>input</entry>
<entry>ct</entry>
<entry>ciphertext buffer</entry>
</row>
<row>
<entry>input</entry>
<entry>ctlen</entry>
<entry>ciphertext length [bytes]</entry>
</row>
</tbody>
</tgroup>
</table>
<p><b>Return codes:</b></p>
<p> 0 on success. Otherwise, a non-zero error code is returned.</p>
</section>
<section>
<title>zpc_aes_ecb_encrypt</title>
<p><b>Purpose:</b></p>
<p>Encrypt a plaintext using AES-ECB to obtain the corresponding ciphertext.</p>
<p>The plaintext buffer length must be a multiple of 16 bytes. The application must 
care for padding the plaintext appropriately.</p>
<p>The ciphertext buffer must be large enough to store the resulting ciphertext which has the same length as the
(padded) plaintext.</p>
<p>Plaintext and ciphertext buffer may be equal such that the operation is done in-place. If the operation is not done
in-place, plaintext and ciphertext buffers must not overlap.</p>
<p>A plaintext may be encrypted chunk-wise. For every operation on a plaintext chunk, the same rules apply as for the
one-shot encryption. In particular, each chunk's length must be a multiple of 16 bytes. The same context object
must be used to encrypt all chunks without modifying it in between operations.</p>
<p><b>Format:</b>
<codeblock>
int zpc_aes_ecb_encrypt (
    struct zpc_aes_ecb * ctx,
    unsigned char * ct,
    const unsigned char * pt,
    size_t ptlen )</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-ECB context object</entry>
</row>
<row>
<entry>output</entry>
<entry>ct</entry>
<entry>ciphertext buffer</entry>
</row>
<row>
<entry>input</entry>
<entry>pt</entry>
<entry>plaintext buffer</entry>
</row>
<row>
<entry>input</entry>
<entry>ptlen</entry>
<entry>plaintext length [bytes]</entry>
</row>
</tbody>
</tgroup>
</table>
<p><b>Return codes:</b></p>
<p> 0 on success. Otherwise, a non-zero error code is returned.</p>
</section>
<section>
<title>zpc_aes_ecb_free</title>
<p><b>Purpose:</b></p>
<p>Free an AES-ECB context object.</p>
<p>If a key is set, the reference count of that key object is decremented. 
The context object argument is set to NULL.</p>
<p><b>Format:</b>
<codeblock>
void zpc_aes_ecb_free (
     struct zpc_aes_ecb ** ctx )</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-ECB context object</entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section>
<title>zpc_aes_ecb_set_key</title>
<p><b>Purpose:</b></p>
<p>Set the key to be used in the context of an AES-ECB operation.</p>
<p>If a key is already set, the reference count of that key object is decremented. 
The context's key reference is set to the key object argument. 
If the key object argument is not NULL, the reference count of that key object 
is incremented.</p>
<p><b>Format:</b>
<codeblock>
int zpc_aes_ecb_set_key (
    struct zpc_aes_ecb * ctx,
    struct zpc_aes_key * key )</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-ECB context object</entry>
</row>
<row>
<entry>input</entry>
<entry>key</entry>
<entry><keyword conref="lxpc_conref.dita#lxpc_conref/aeskeyobj"/></entry>
</row>
</tbody>
</tgroup>
</table>
<p><b>Return codes:</b></p>
<p> 0 on success. Otherwise, a non-zero error code is returned.</p>
</section>
</refbody>
</reference>
<?Pub *0000003393?>
