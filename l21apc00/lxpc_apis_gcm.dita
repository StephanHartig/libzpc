<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE reference PUBLIC "-//IBM//DTD DITA IBM Reference//EN"
 "ibm-concept.dtd">
<?Pub Sty _display FontColor="red"?>
<reference id="lxpc_apis_ccm" xml:lang="en-us">
<title>AES GCM APIs - zpc/aes_gcm.h</title>
<titlealts>
<navtitle>AES GCM APIs</navtitle>
<searchtitle><ph conref="lxcommon.dita#phrases/lib_title"/>: <keyword
conref="lxpc_conref.dita#lxpc_conref/libzpc"/> AES GCM APIs</searchtitle>
</titlealts>
<shortdesc>In file <filepath>zpc/aes_gcm.h</filepath>, <keyword
conref="lxpc_conref.dita#lxpc_conref/libzpc"/> provides APIs for processing Advanced Encryption
Standard (AES) block cipher in Galois/Counter Mode (GCM) mode of operation.</shortdesc>
<prolog>
<metadata>
<keywords>
<indexterm>AES GCM APIs</indexterm>
<indexterm>aes_gcm.h</indexterm>
<indexterm>GCM APIs</indexterm>
<indexterm>APIs <indexterm>GCM</indexterm></indexterm>
</keywords>
</metadata>
</prolog>
<refbody>
<section>
<p>The context of a AES-GCM operation is stored in objects of type <codeph>struct
zpc_aes_gcm</codeph>. Context objects must not be shared among multiple threads. They may be sued
for multiple operations by setting or resetting the key or initialization vector.</p>
</section>
<section>
<title>zpc_aes_gcm_alloc</title>
<p><b>Purpose:</b></p>
<p>Allocate a new context object for an AES-GCM operation.</p>
<p><b>Format:</b>
<codeblock>
int zpc_aes_gcm_alloc ( 
    struct zpc_aes_gcm ** ctx )</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-GCM context object</entry>
</row>
</tbody>
</tgroup>
</table>
<p><b>Return codes:</b></p>
<p> 0 on success. Otherwise, a non-zero error code is returned.</p>
</section>
<section>
<title>zpc_aes_gcm_decrypt</title>
<p><b>Purpose:</b></p>
<p>Decrypt a ciphertext to obtain the corresponding plaintext and verify the message authentication code of the ciphertext
and additional data using AES-GCM. If there is no ciphertext input, the operation corresponds to AES-GMAC.</p>
<p>The plaintext buffer must be large enough to store the resulting plaintext which has the same length as the ciphertext.
Plaintext and ciphertext buffer may be equal such that the operation is done in-place. If the operation is not done
in-place, plaintext and ciphertext buffers must not overlap.</p>
<p>Additional data and ciphertext may be decrypted and authenticated chunk-wise. The additional data
must be processed first. All chunk-lengths except the last one must be a multiple of 16 bytes. The
ciphertext and message authentication code arguments must be NULL when processing those non-final
chunks. A chunk-length that is not a multiple of 16 bytes, a non-NULL ciphertext argument, or a
non-NULL message authentication code argument, indicates  the end of the additional data. The
ciphertext must be processed in the second place. All chunk-lengths except the last one must be a
multiple of 16 bytes. The message authentication code argument must be NULL when processing those
non-final chunks. A chunk-length that is not a multiple of 16 bytes, or a non-NULL message
authentication code argument, indicates the end of the ciphertext. The same context object must be
used to process all chunks without modifying it between operations.</p>
<p><b>Format:</b>
<codeblock>
int zpc_aes_gcm_decrypt (
    struct zpc_aes_gcm * ctx,  
    unsigned char  pt,
    const unsigned char * mac,
    size_t maclen,
    const unsigned char * aad,
    size_t aadlen,
    const unsigned char * ct,
    size_t ctlen )</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-GCM context object</entry>
</row>
<row>
<entry>output</entry>
<entry>pt</entry>
<entry>plaintext buffer</entry>
</row>
<row>
<entry>input</entry>
<entry>mac</entry>
<entry> message authentication code buffer</entry>
</row>
<row>
<entry>input</entry>
<entry>maclen</entry>
<entry>message authentication code length [bytes]</entry>
</row>
<row>
<entry>input</entry>
<entry>aad</entry>
<entry>additional authenticated data buffer</entry>
</row>
<row>
<entry>input</entry>
<entry>aadlen</entry>
<entry>additional authenticated data length [bytes]</entry>
</row>
<row>
<entry>input</entry>
<entry>ct</entry>
<entry>ciphertext buffer</entry>
</row>
<row>
<entry>input</entry>
<entry>ctlen</entry>
<entry>ciphertext length [bytes]</entry>
</row>
</tbody>
</tgroup>
</table>
<p><b>Return codes:</b></p>
<p> 0 on success. Otherwise, a non-zero error code is returned.</p>
</section>
<section>
<title>zpc_aes_gcm_encrypt</title>
<p><b>Purpose:</b></p>
<p>Encrypt a plaintext and sign the ciphertext and additional data using AES-GCM to obtain the corresponding ciphertext
and message authentication code. If there is no plaintext input, the operation corresponds to AES-GMAC.</p>
<p>The ciphertext buffer must be large enough to store the resulting ciphertext which has the same length as the
plaintext.</p>
<p>Plaintext and ciphertext buffer may be equal such that the operation is done in-place. If the operation is not done
in-place, plaintext and ciphertext buffers must not overlap.</p>
<p>Additional data and plaintext may be encrypted and authenticated chunk-wise. The additional data
must be processed first. All chunk-lengths except the last one must be a multiple of 16 bytes. The
plaintext and message authentication code arguments must be NULL when processing those non-final
chunks. A chunk-length that is not a multiple of 16 bytes, a non-NULL plaintext argument or a
non-NULL message authentication code argument, indicate the end of the additional date, The
plaintext must be processed second. All chunk-lengths except the last one must be a multiple of 16
bytes. The message authentication code argument must be NULL when processing those non-final chunks.
A chunk-length that is not a multiple of 16 bytes or a non-NULL message authentication code
argument, indicates the end of the plaintext. The same context object must be used to process all
chunks without modifying it between operations.</p>
<p><b>Format:</b>
<codeblock>
int zpc_aes_gcm_encrypt (
    struct zpc_aes_gcm * ctx,
    unsigned char * ct,
    unsigned char * mac,
    size_t maclen,
    const unsigned char * aad,
    size_t aadlen,
    const unsigned char * pt,
    size_t ptlen )
</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-GCM context object</entry>
</row>
<row>
<entry>output</entry>
<entry>ct</entry>
<entry>ciphertext buffer</entry>
</row>
<row>
<entry>output</entry>
<entry>mac</entry>
<entry>message authentication code buffer</entry>
</row>
<row>
<entry>input</entry>
<entry>maclen</entry>
<entry>message authentication code length [bytes]</entry>
</row>
<row>
<entry>input</entry>
<entry>aad</entry>
<entry>additional authenticated data buffer</entry>
</row>
<row>
<entry>input</entry>
<entry>aadlen</entry>
<entry>additional authenticated data length [bytes]</entry>
</row>
<row>
<entry>input</entry>
<entry>pt</entry>
<entry>plaintext buffer</entry>
</row>
<row>
<entry>input</entry>
<entry>ptlen</entry>
<entry>plaintext length [bytes]</entry>
</row>
</tbody>
</tgroup>
</table>
<p><b>Return codes:</b></p>
<p> 0 on success. Otherwise, a non-zero error code is returned.</p>
</section>
<section>
<title>zpc_aes_gcm_free</title>
<p><b>Purpose:</b></p>
<p>Free an AES-GCM context object.</p>
<p>If a key is set, the reference count of that key object is decremented. The context object
argument is set to NULL.</p>
<p><b>Format:</b>
<codeblock>
void zpc_aes_gcm_free (
     struct zpc_aes_cbc ** ctx )</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-GCM context object</entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section>
<title>zpc_aes_gcm_set_iv</title>
<p><b>Purpose:</b></p>
<p>Set the initialization vector to be used in the context of an AES-GCM operation.</p>
<p><b>Format:</b>
<codeblock>
int zpc_aes_gcm_set_iv (
    struct zpc_aes_gcm * ctx,
    const unsigned char * iv,
    size_t ivlen )</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-GCM context object</entry>
</row>
<row>
<entry>input</entry>
<entry>iv</entry>
<entry>initialization vector buffer</entry>
</row>
<row>
<entry>input</entry>
<entry>ivlen</entry>
<entry>initialization vector length [bytes]</entry>
</row>
</tbody>
</tgroup>
</table>
<p><b>Return codes:</b></p>
<p> 0 on success. Otherwise, a non-zero error code is returned.</p>
</section>
<section>
<title>zpc_aes_gcm_set_key</title>
<p><b>Purpose:</b></p>
<p>Set the key to be used in the context object of an AES-GCM operation.</p>
<p>If a key is already set, the reference count of that key object is decremented. The context's key
reference is set to the key object argument. If the key object argument is not NULL, the reference
count of that key object is incremented.</p>
<p><b>Format:</b>
<codeblock>
int zpc_aes_gcm_set_key (
    struct zpc_aes_gcm * ctx,
    struct zpc_aes_key * key )</codeblock>
</p>
<p><b>Parameters:</b>
</p>
<table pgwide="0" frame="all">
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="15*"/>
<colspec colname="col2" colwidth="15*"/>
<colspec colname="col3" colwidth="70*"/>
<thead>
<row>
<entry>Direction</entry>
<entry>Name</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>input, output</entry>
<entry>ctx</entry>
<entry>AES-GCM context object</entry>
</row>
<row>
<entry>input</entry>
<entry>key</entry>
<entry><keyword conref="lxpc_conref.dita#lxpc_conref/aeskeyobj"/></entry>
</row>
</tbody>
</tgroup>
</table>
<p><b>Return codes:</b></p>
<p> 0 on success. Otherwise, a non-zero error code is returned.</p>
</section>
</refbody>
</reference>
<?Pub *0000003393?>
